{
  "openapi": "3.1.1",
  "info": {
    "title": "SCAC API v2",
    "version": "2.1.63",
    "description": "## *Orientações*\nAPI utilizada para comunicação entre controladoras e servidores do SCAC.\n\nEsta API deve ser utilizada após configuração da controladora na rede EMPRESA XXX.\n Esta API REST permite que qualquer hardware se comunique com a aplicação do SCAC.",
    "contact": {
      "name": "GESEP - GN Segurança Empresarial",
      "email": "gesep02@empresaXX.gov.br"
    }
  },
  "servers": [
    {
      "url": "http://sicia-apinode-backend-des-esteiras.nprd2.empresaXX/v2",
      "description": "API SCAC V2"
    }
  ],
  "paths": {
    "/abertura": {
      "description": "Abre a agência",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AberturaFechamentoAgenciaType"
              },
              "examples": {
                "Abertura": {
                  "value": {
                    "mac": "1a:1a:1a:1a:1a:1a",
                    "personId": 12493,
                    "coercion": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Abertura/Fechamento"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Abertura": {
                    "value": {
                      "statusCode": 200,
                      "data": "ABERTURA"
                    }
                  }
                }
              }
            },
            "description": "Sucesso na abertura."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Abertura": {
                    "value": {
                      "statusCode": 400,
                      "data": "Unidade já está aberta."
                    }
                  }
                }
              }
            },
            "description": "Erro gerado em uma tentativa de abrir agência já aberta."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Abertura da agência",
        "description": "Abre a agência."
      }
    },
    "/fechamento": {
      "description": "Fecha a agência",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/AberturaFechamentoAgenciaType"
              },
              "examples": {
                "Fechamento": {
                  "value": {
                    "mac": "1a:1a:1a:1a:1a:1a",
                    "personId": 12493,
                    "coercion": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Abertura/Fechamento"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Fechamento": {
                    "value": {
                      "statusCode": 200,
                      "data": "FECHAMENTO"
                    }
                  }
                }
              }
            },
            "description": "Sucesso no fechamento."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Fechamento": {
                    "value": {
                      "statusCode": 400,
                      "data": "Unidade já está fechada."
                    }
                  }
                }
              }
            },
            "description": "Erro gerado em uma tentativa de fechar agência já fechada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Fechamento da agência",
        "description": "Fecha a agência."
      }
    },
    "/solicitacoes": {
      "description": "Lista as solicitações de abertura/fechamento a serem atendidas",
      "post": {
        "requestBody": {},
        "tags": [
          "Servidor: Abertura/Fechamento"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SolicitacoesType"
                },
                "examples": {
                  "Listagem": {
                    "value": {
                      "response": [
                        {
                          "id": 18658686,
                          "tipo": "acesso_primario",
                          "delay": null,
                          "coercao": true,
                          "atendimento": false,
                          "declined": null,
                          "direcao": "entrada",
                          "data_acesso": "2024-12-20T02:05:09.849Z",
                          "fuso_local": "-03:00",
                          "observacao": null,
                          "fk_nu_controladora": 3371,
                          "nu_controladora_mac": "b8:27:eb:02:43:54",
                          "nu_controladora_ip": "10.69.181.85",
                          "fk_nu_cidade": 2027,
                          "no_cidade": null,
                          "fk_nu_estado": 43,
                          "no_estado": "RIO GRANDE DO SUL   ",
                          "no_sigla_estado": "RS",
                          "fk_nu_giseg": 7637,
                          "no_giseg": "SEGURANCA EMPRESARIAL SAO PAULO    ",
                          "fk_nu_ocorrencia": null,
                          "fk_nu_pessoa": 43498,
                          "fk_nu_agente": 40749,
                          "no_agente": "GILBERTO LOPES",
                          "agente_cpf": null,
                          "agente_cnv": null,
                          "agente_foto": null,
                          "agente_telefone": null,
                          "agente_contrato": null,
                          "agente_empresa": null,
                          "fk_nu_porta": 3853,
                          "fk_nu_sr": 2615,
                          "no_sr": "SERRA GAUCHA, RS                   ",
                          "fk_nu_unidade": 161,
                          "fk_nu_unidade_cgc": null,
                          "fk_nu_unidade_siico": 567,
                          "no_unidade": "0567 - ENCANTADO- RS",
                          "nu_unidade_tipo": "agencia",
                          "unidade_hora_abertura": null,
                          "unidade_minuto_abertura": null,
                          "unidade_hora_fechamento": null,
                          "unidade_minuto_fechamento": null,
                          "fk_nu_autorizador": null,
                          "no_autorizador": "Autorizador",
                          "matricula_autorizador": null,
                          "deletedAt": null,
                          "createdAt": "2024-12-20T02:05:09.849Z",
                          "updatedAt": "2024-12-20T02:05:09.849Z"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Solicitações em aberto."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Listagem": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro na listagem."
                    }
                  }
                }
              }
            },
            "description": "Erro gerado em uma tentativa de listar solicitações."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Listagem de solicitações abertas",
        "description": "Lista solicitações abertas."
      }
    },
    "/abertura/teclado-externo": {
      "description": "Abre a porta magnética da agência",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TecladoExternoType"
              },
              "examples": {
                "Abertura": {
                  "value": {
                    "mac": "1a:1a:1a:1a:1a:1a",
                    "pessoaId": 12493,
                    "coercion": false,
                    "accessDate": "2023-02-17T13:30:24.336Z"
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Abertura/Fechamento"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Abertura": {
                    "value": {
                      "statusCode": 200,
                      "data": "TECLADO EXTERNO"
                    }
                  }
                }
              }
            },
            "description": "Sucesso na abertura."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Abertura": {
                    "value": {
                      "statusCode": 400,
                      "data": "Unidade está fechada."
                    }
                  }
                }
              }
            },
            "description": "Erro gerado em uma tentativa de abrir a porta magnética de uma agência fechada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Abertura da agência via teclado externo.",
        "description": "Abre a porta magnética da agência."
      }
    },
    "/controladora/central/request": {
      "description": "Envia solicitação de abertura/fechamento para a central",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CentralRequestType"
              },
              "examples": {
                "Requisição Abertura": {
                  "value": {
                    "mac": "1e:1e:1e:1e:1e:1e",
                    "pessoaId": 10,
                    "coercion": false,
                    "direction": "entrada"
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Abertura/Fechamento"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoCentralRequestType"
                },
                "examples": {
                  "Requisição Abertura": {
                    "value": {
                      "statusCode": 200,
                      "id": 20
                    }
                  }
                }
              }
            },
            "description": "Requisição recebida com sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Requisição Abertura": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando a requisição não pode ser recebida."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Solicitação para a central",
        "description": "Envia solicitação de abertura/fechamento para a central"
      }
    },
    "/controladora/central/response": {
      "description": "Valida a solicitação de abertura ou fechamento",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CentralResponseType"
              },
              "examples": {
                "Validar solicitação": {
                  "value": {
                    "id": 20,
                    "declined": false,
                    "authorizerId": 10,
                    "observation": "nenhuma"
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Abertura/Fechamento"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoCentralResponseType"
                },
                "examples": {
                  "Validar solicitação": {
                    "value": {
                      "statusCode": 200,
                      "authorizer": 10
                    }
                  }
                }
              }
            },
            "description": "Resultado da silicitação validada com sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Validar solicitação": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando a solicitação não pode ser validada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Valida solicitação",
        "description": "Valida a solicitação de abertura ou fechamento"
      }
    },
    "/controladora/testes": {
      "description": "Recebe resultados de testes de hardware na controladora",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/TestesType"
              },
              "examples": {
                "Biometria": {
                  "value": {
                    "mac": "1e:1e:1e:1e:1e:1e",
                    "type": "biometria",
                    "succeed": true
                  }
                },
                "Luzes": {
                  "value": {
                    "mac": "1e:1e:1e:1e:1e:1e",
                    "type": "luzes",
                    "succeed": false
                  }
                },
                "Teclado Principal": {
                  "value": {
                    "mac": "1e:1e:1e:1e:1e:1e",
                    "type": "teclado_principal",
                    "succeed": true
                  }
                },
                "Teclado Auxiliar": {
                  "value": {
                    "mac": "1e:1e:1e:1e:1e:1e",
                    "type": "teclado_auxiliar",
                    "succeed": true
                  }
                },
                "Tela": {
                  "value": {
                    "mac": "1e:1e:1e:1e:1e:1e",
                    "type": "tela",
                    "succeed": true
                  }
                },
                "Sinal Sonoro": {
                  "value": {
                    "mac": "1e:1e:1e:1e:1e:1e",
                    "type": "sinal_sonoro",
                    "succeed": false
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Testes"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Teste Concluído": {
                    "value": {
                      "statusCode": 200,
                      "data": "sucesso"
                    }
                  }
                }
              }
            },
            "description": "Resultado do teste recebido com Sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Não Cadastrada": {
                    "value": {
                      "statusCode": 400,
                      "data": "Porta não está associada a nenhuma unidade cadastrada."
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando a controladora cadastrada no endereço MAC informado não possui uma porta associada."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Não Encontrada": {
                    "value": {
                      "statusCode": 404,
                      "data": "Controladora não encontrada."
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o endereço MAC informado não possui uma controladora cadastrada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Testes de hardware",
        "description": "Recebe resultados de testes de hardware na controladora."
      }
    },
    "/controladora/request/test": {
      "description": "Recebe uma requisição de um teste de hardware a ser feito na controladora",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestTestType"
              },
              "examples": {
                "Biometria": {
                  "value": {
                    "ip": "192.168.0.1",
                    "type": "biometria"
                  }
                },
                "Luzes": {
                  "value": {
                    "ip": "192.168.0.1",
                    "type": "luzes"
                  }
                },
                "Teclado Principal": {
                  "value": {
                    "ip": "192.168.0.1",
                    "type": "teclado_principal"
                  }
                },
                "Teclado Auxiliar": {
                  "value": {
                    "ip": "192.168.0.1",
                    "type": "teclado_auxiliar"
                  }
                },
                "Tela": {
                  "value": {
                    "ip": "192.168.0.1",
                    "type": "tela"
                  }
                },
                "Sinal Sonoro": {
                  "value": {
                    "ip": "192.168.0.1",
                    "type": "sinal_sonoro"
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Testes"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Teste Solicitado": {
                    "value": {
                      "statusCode": 200,
                      "data": "sucesso"
                    }
                  }
                }
              }
            },
            "description": "Solicitação do teste recebida com Sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Não Cadastrada": {
                    "value": {
                      "statusCode": 400,
                      "data": "Porta não está associada a nenhuma unidade cadastrada."
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando a controladora cadastrada no endereço IP informado não possui uma porta associada."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Não Encontrada": {
                    "value": {
                      "statusCode": 404,
                      "data": "Controladora não encontrada."
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o endereço IP informado não possui uma controladora cadastrada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Testes de hardware",
        "description": "Recebe requisição de teste de hardware na controladora."
      }
    },
    "/controladora/sync": {
      "description": "Sincroniza com o server, os dados que foram salvos offline na controladora",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncType"
              },
              "examples": {
                "Sincronização": {
                  "value": {
                    "version": "v1.3-rc",
                    "status": true,
                    "macControladora": "b8:27:eb:df:64:94",
                    "nomeHardware": "RPi1",
                    "access": [
                      {
                        "type": "normal",
                        "delay": "2023-01-17",
                        "coercion": false,
                        "attendance": false,
                        "declined": false,
                        "direction": "entrada",
                        "accessDate": "2023-01-17",
                        "localTimezone": "-03:00",
                        "observation": "nenhuma"
                      },
                      {
                        "type": "normal",
                        "delay": "2023-01-17",
                        "coercion": false,
                        "attendance": false,
                        "declined": false,
                        "direction": "abertura",
                        "accessDate": "2023-01-17",
                        "localTimezone": "-03:00",
                        "observation": "nenhuma"
                      },
                      {
                        "type": "normal",
                        "delay": "2023-01-17",
                        "coercion": false,
                        "attendance": false,
                        "declined": false,
                        "direction": "fechamento",
                        "accessDate": "2023-01-17",
                        "localTimezone": "-03:00",
                        "observation": "nenhuma"
                      },
                      {
                        "type": "normal",
                        "delay": "2023-01-17",
                        "coercion": false,
                        "attendance": false,
                        "declined": false,
                        "direction": "saida",
                        "accessDate": "2023-01-17",
                        "localTimezone": "-03:00",
                        "observation": "nenhuma"
                      }
                    ]
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Sincronização"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Fechamento": {
                    "value": {
                      "statusCode": 200,
                      "data": "FECHAMENTO"
                    }
                  }
                }
              }
            },
            "description": "Sincronização concluída."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Fechamento": {
                    "value": {
                      "statusCode": 404,
                      "data": "Controladora não encontrada."
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o endereço MAC informado não possui uma controladora cadastrada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Sincronização de dados",
        "description": "Sincroniza com o server, os dados que foram salvos offline na controladora."
      }
    },
    "/controladora/is-legacy/{mac}": {
      "description": "Verifica se a controladora utiliza ou não a nova API",
      "get": {
        "parameters": [
          {
            "name": "mac",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {},
        "tags": [
          "Servidor: Sincronização"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "RPI1": {
                    "value": {
                      "statusCode": 200,
                      "data": true
                    }
                  },
                  "RPI4": {
                    "value": {
                      "statusCode": 200,
                      "data": false
                    }
                  }
                }
              }
            },
            "description": "Resultado da consulta."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Consulta": {
                    "value": {
                      "statusCode": 404,
                      "data": "Controladora não encontrada."
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o endereço MAC informado não possui uma controladora cadastrada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Consulta de status",
        "description": "Verifica se a controladora utiliza ou não a nova API."
      }
    },
    "/controladora/custodia": {
      "description": "Alterna o estado de custódia da controladora entre simples e dupla",
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/ChangeCustodiaType"
              },
              "examples": {
                "Alteração Simples": {
                  "value": {
                    "mac": "b8:27:eb:df:64:94",
                    "custodia": "simples"
                  }
                },
                "Alteração Dupla": {
                  "value": {
                    "mac": "b8:27:eb:df:64:94",
                    "custodia": "dupla"
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Sincronização"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Simples custódia": {
                    "value": {
                      "statusCode": 200,
                      "data": "Simples"
                    }
                  },
                  "Dupla custódia": {
                    "value": {
                      "statusCode": 200,
                      "data": "Dupla"
                    }
                  }
                }
              }
            },
            "description": "Custódia alterada com sucesso."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Alteração de custódia": {
                    "value": {
                      "statusCode": 404,
                      "data": "Controladora não encontrada."
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o endereço MAC informado não possui uma controladora cadastrada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Alteração de custódia",
        "description": "Alterna o estado de custódia da controladora entre simples e dupla"
      }
    },
    "/controladora/sync-user": {
      "description": "Sincroniza com a controladora, os dados de usuário",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncPessoaType"
              },
              "examples": {
                "Sincronização": {
                  "value": {
                    "mac": "b8:27:eb:df:64:94",
                    "pessoaId": 123
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Sincronização"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Sincronização": {
                    "value": {
                      "statusCode": 200,
                      "data": "Usuário Sincronizado"
                    }
                  }
                }
              }
            },
            "description": "Sincronização concluída."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Sincronização": {
                    "value": {
                      "statusCode": 404,
                      "data": "Controladora não encontrada."
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o endereço MAC informado não possui uma controladora cadastrada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Sincronização de dados",
        "description": "Sincroniza com a controladora, os dados de uma pessoa cadastrada no SCAC."
      }
    },
    "/controladora/vigilante": {
      "description": "Sincroniza com a controladora, os dados do vigilante",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncPessoaType"
              },
              "examples": {
                "Vigilante": {
                  "value": {
                    "mac": "b8:27:eb:df:64:94",
                    "pessoaId": 2536
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Sincronização"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Sincronização": {
                    "value": {
                      "statusCode": 200,
                      "data": "Vigilante vinculado"
                    }
                  }
                }
              }
            },
            "description": "Sincronização concluída."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Sincronização": {
                    "value": {
                      "statusCode": 404,
                      "data": "Controladora não encontrada."
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o endereço MAC informado não possui uma controladora cadastrada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Sincronização de dados",
        "description": "Sincroniza com a controladora, os dados do vigilante"
      }
    },
    "/pin": {
      "description": "Salva o PIN coletado",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PinType"
              },
              "examples": {
                "Pin": {
                  "value": {
                    "value": "046205",
                    "type": "normal",
                    "personId": 41450
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Pin / Biometria"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Salvar PIN": {
                    "value": {
                      "statusCode": 200,
                      "data": "created"
                    }
                  }
                }
              }
            },
            "description": "Resultado do PIN salvo com Sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Salvar PIN": {
                    "value": {
                      "statusCode": 400,
                      "data": "Senha já existe"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o PIN enviado já existe."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Salvar PIN",
        "description": "Salva o PIN coletado."
      }
    },
    "/pin/{id}": {
      "description": "Altera a senha salva",
      "delete": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {},
        "tags": [
          "Servidor: Pin / Biometria"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Deletar PIN": {
                    "value": {
                      "statusCode": 200,
                      "data": "deleted"
                    }
                  }
                }
              }
            },
            "description": "Resultado do PIN deletado com sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Deletar PIN": {
                    "value": {
                      "statusCode": 400,
                      "data": "PIN não existe"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o PIN não pode ser deletado."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Deletar PIN",
        "description": "Deleta o PIN Salvo"
      },
      "patch": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PinType"
              },
              "examples": {
                "Pin Valido": {
                  "value": {
                    "id": 1,
                    "type": "normal",
                    "validity": "2023-01-17",
                    "cadastralSituation": 1,
                    "value": 123456
                  }
                },
                "Pin Coerção": {
                  "value": {
                    "type": "coercao",
                    "validity": "2023-01-17",
                    "cadastralSituation": 1,
                    "value": 123456
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Pin / Biometria"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Atualizar PIN": {
                    "value": {
                      "statusCode": 200,
                      "data": "updated"
                    }
                  }
                }
              }
            },
            "description": "Resultado do PIN Atualizado com Sucesso."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Atualizar PIN": {
                    "value": {
                      "statusCode": 400,
                      "data": "PIN não existe"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o PIN não existe."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Atualizar PIN",
        "description": "Atualiza o PIN salvo."
      }
    },
    "/pin/id/{id}": {
      "description": "Busca pelo id uma senha salva",
      "get": {
        "parameters": [
          {
            "name": "id",
            "in": "path",
            "required": true,
            "type": "string"
          }
        ],
        "requestBody": {},
        "tags": [
          "Servidor: Pin / Biometria"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/PinType"
                },
                "examples": {
                  "Localizar PIN": {
                    "value": {
                      "id": 8218,
                      "cadastralSituation": 3,
                      "type": "normal",
                      "value": "128051",
                      "validity": "2019-11-12T19:27:50.820Z",
                      "personId": null,
                      "deletedAt": null
                    }
                  }
                }
              }
            },
            "description": "Lista de PINs salvos"
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Localizar PIN": {
                    "value": {
                      "statusCode": 400,
                      "data": "PIN não existe"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o PIN informado não existe."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Buscar PIN",
        "description": "Busca um PIN salvo."
      }
    },
    "/pin/filter": {
      "description": "Busca por um filtro uma senha salva",
      "get": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/PinType"
              },
              "examples": {
                "Filtro por tipo": {
                  "value": {
                    "type": "normal"
                  }
                },
                "Filtro por data": {
                  "value": {
                    "validity": "2023-01-17"
                  }
                },
                "Filtro por situação": {
                  "value": {
                    "cadastralSituation": 1
                  }
                },
                "Filtro por PIN": {
                  "value": {
                    "value": 123456
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Pin / Biometria"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/GetPINFiltroType"
                },
                "examples": {
                  "Listar PINs": {
                    "value": {
                      "items": 2,
                      "data": [
                        {
                          "id": 8218,
                          "cadastralSituation": 3,
                          "type": "normal",
                          "value": "128051",
                          "validity": "2019-11-12T19:27:50.820Z",
                          "personId": null,
                          "deletedAt": null
                        },
                        {
                          "id": 13149,
                          "cadastralSituation": 3,
                          "type": "normal",
                          "value": "132028",
                          "validity": "2019-12-30T17:44:42.094Z",
                          "personId": null,
                          "deletedAt": null
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Listagem de PINs salvos."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Listar PINs": {
                    "value": {
                      "statusCode": 400,
                      "data": "PIN não existe"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o PIN informado não existe."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Buscar PIN",
        "description": "Busca um PIN salvo."
      }
    },
    "/request-pin": {
      "description": "Solicita coleta do PIN",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestPINType"
              },
              "examples": {
                "Requisição": {
                  "value": {
                    "ip": "10.11.200.150",
                    "personId": 41450
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Pin / Biometria"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Requisição": {
                    "value": {
                      "statusCode": 200,
                      "data": "ok"
                    }
                  }
                }
              }
            },
            "description": "Coleta de PIN solicitada com Sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Requisição": {
                    "value": {
                      "statusCode": 400,
                      "data": "PIN não pode ser coletado"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o PIN não pode ser coletado."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Vigilante": {
                    "value": {
                      "statusCode": 404,
                      "data": "Vigilante não encontrado"
                    }
                  },
                  "Controladora": {
                    "value": {
                      "statusCode": 404,
                      "data": "Controladora não encontrada"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o vigilante ou a controladora informadas não foram encontradas."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Coletar PIN",
        "description": "Solicita coleta do PIN."
      }
    },
    "/biometria": {
      "description": "Salva a Biometria coletada",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BiometriaType"
              },
              "examples": {
                "Biometria indicador esquerdo": {
                  "value": {
                    "hand": "esquerda",
                    "finger": "indicador",
                    "isBlocked": false,
                    "cadastralSituation": 3,
                    "isCoercao": false,
                    "value": "hash=hjfJHFAjfaj",
                    "personId": 41450
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Pin / Biometria"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Salvar Biometria": {
                    "value": {
                      "statusCode": 200,
                      "data": "created"
                    }
                  }
                }
              }
            },
            "description": "Resultado da biometria salva com Sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Salvar Biometria": {
                    "value": {
                      "statusCode": 400,
                      "data": "Biometria já existe"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando a biometria enviada já existe."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Salvar Biometria",
        "description": "Salva a Biometria coletada."
      }
    },
    "/request-fp": {
      "description": "Solicita coleta da biometria",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/RequestBiometriaType"
              },
              "examples": {
                "Biometria indicador esquerdo": {
                  "value": {
                    "hand": "esquerda",
                    "finger": "indicador",
                    "ip": "10.11.12.150",
                    "personId": 41450
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Pin / Biometria"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Coletar Biometria": {
                    "value": {
                      "statusCode": 200,
                      "data": "ok"
                    }
                  }
                }
              }
            },
            "description": "Coleta da biometria solicitada com Sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Coletar Biometria": {
                    "value": {
                      "statusCode": 400,
                      "data": "Biometria não pode ser coletada"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando a Biometria não pode ser coletada."
          },
          "404": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Vigilante": {
                    "value": {
                      "statusCode": 404,
                      "data": "Vigilante não encontrado"
                    }
                  },
                  "Controladora": {
                    "value": {
                      "statusCode": 404,
                      "data": "Controladora não encontrada"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o vigilante ou a controladora informadas não foram encontradas."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Salvar Biometria",
        "description": "Salva a Biometria coletada."
      }
    },
    "/notificacao/pin": {
      "description": "Registra uma nova notificação",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NotificationType"
              },
              "examples": {
                "Notificação de PIN fora do horário": {
                  "value": {
                    "notificationType": "pin_out_hours",
                    "access": {
                      "delay": "2023-01-05",
                      "coercion": false,
                      "attendance": false,
                      "declined": false,
                      "accessDate": "2023-01-05",
                      "localTimezone": "-03:00",
                      "personId": 41450,
                      "unityId": 3
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Servidor: Notificação"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Salvar notificação": {
                    "value": {
                      "statusCode": 200,
                      "data": "Sucesso"
                    }
                  }
                }
              }
            },
            "description": "Resultado da notificação salva com Sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Salvar notificação": {
                    "value": {
                      "statusCode": 400,
                      "data": "Invalid Format"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o formato da notificação é inválido."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Salvar Notificação",
        "description": "Registra uma nova notificação"
      }
    },
    "/api/vigilante": {
      "description": "Salva dados do vigilante",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/VigilanteType"
              },
              "examples": {
                "Salvar Vigilante": {
                  "value": {
                    "nome": "NILTON JR",
                    "cpf": "11111111111",
                    "cnv": "321121",
                    "personId": "82459"
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Controladoras: Gerenciamento de Vigilantes"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Salvar Vigilante": {
                    "value": {
                      "statusCode": 200,
                      "data": "Sucesso"
                    }
                  }
                }
              }
            },
            "description": "Resultado do vigilante salvo com Sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Salvar Vigilante": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o vigilante não foi salvo."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Enviar dados de um vigilante para a controladora",
        "description": "Salva dados do vigilante"
      }
    },
    "/api/fp": {
      "description": "Gerencia a Biometria",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BiometriaFpType"
              },
              "examples": {
                "Coletar biometria indicador esquerdo": {
                  "value": {
                    "hand": "esquerda",
                    "finger": "indicador",
                    "personId": 41439
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Controladoras: Pin / Biometria"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Salvar Biometria": {
                    "value": {
                      "statusCode": 200,
                      "data": "Sucesso"
                    }
                  }
                }
              }
            },
            "description": "Resultado da biometria coletada e salva com Sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Salvar Biometria": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando a biometria não pode ser coletada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Salvar Biometria dentro da controladora",
        "description": "Salva a Biometria"
      },
      "delete": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/BiometriaFpType"
              },
              "examples": {
                "Deletar Biometria": {
                  "value": {
                    "hand": "esquerda",
                    "finger": "indicador",
                    "personId": 41439
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Controladoras: Pin / Biometria"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Deletar Biometria": {
                    "value": {
                      "statusCode": 200,
                      "data": "Sucesso"
                    }
                  }
                }
              }
            },
            "description": "Biometria deletada com Sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Deletar Biometria": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando a biometria não pode ser deletada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Deletar Biometria dentro da controladora",
        "description": "Deleta a Biometria"
      }
    },
    "/api/pin": {
      "description": "Gerencia o PIN",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectPinType"
              },
              "examples": {
                "Coletar PIN": {
                  "value": {
                    "personId": 41439
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Controladoras: Pin / Biometria"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Coletar Biometria": {
                    "value": {
                      "statusCode": 200,
                      "data": "Sucesso"
                    }
                  }
                }
              }
            },
            "description": "Resultado do PIN coletado e salvo com Sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Coletar Biometria": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o PIN não pode ser coletado."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Salvar PIN dentro da controladora",
        "description": "Salva o PIN"
      },
      "delete": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CollectPinType"
              },
              "examples": {
                "Deletar PIN": {
                  "value": {
                    "personId": 41439
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Controladoras: Pin / Biometria"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Deletar PIN": {
                    "value": {
                      "statusCode": 200,
                      "data": "Sucesso"
                    }
                  }
                }
              }
            },
            "description": "Resultado do PIN deletado com sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Deletar PIN": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o PIN não pode ser deletado."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Deletar PIN dentro da controladora",
        "description": "Deleta o PIN"
      }
    },
    "/api/custodia": {
      "description": "Alterna o estado de custódia da controladora entre simples e dupla",
      "put": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/CustodiaType"
              },
              "examples": {
                "Alterar custódia": {
                  "value": {
                    "custodia": "simples"
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Controladoras: Custódia"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Alterar custódia": {
                    "value": {
                      "statusCode": 200,
                      "data": "Sucesso"
                    }
                  }
                }
              }
            },
            "description": "Custódia alterada com sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Alterar custódia": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando a custódia não foi alterada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Alteração de custódia",
        "description": "Alterna o estado de custódia da controladora entre simples e dupla"
      }
    },
    "/api/historicocustodia": {
      "description": "Verifica o log de histórico de custódia",
      "get": {
        "requestBody": {},
        "tags": [
          "Controladoras: Custódia"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoHistoricoCustodiaType"
                },
                "examples": {
                  "Consultar histórico": {
                    "value": {
                      "itens": [
                        {
                          "data": "2023-02-17T13:30:34.014Z",
                          "custodia": "simples",
                          "createdAt": "2023-02-17T13:30:34.014Z",
                          "updatedAt": "2023-02-17T13:30:34.014Z"
                        }
                      ]
                    }
                  }
                }
              }
            },
            "description": "Resultado da consulta do histórico de custódia."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Consultar histórico": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o histórico não pode ser consultado."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Histórico de custódia",
        "description": "Verifica o log de histórico de custódia"
      }
    },
    "/api/healthcheck": {
      "description": "Verifica a saúde da controladora",
      "get": {
        "requestBody": {},
        "tags": [
          "Controladoras: healthcheck"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoHealthcheckType"
                },
                "examples": {
                  "Healthcheck": {
                    "value": {
                      "mac": "1e:1e:1e:1e:1e:1e",
                      "status": true,
                      "versao": "v1.3.10-rc",
                      "custodia": "simples"
                    }
                  }
                }
              }
            },
            "description": "Healthcheck da controladora."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Healthcheck": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o Healtchcheck não pode ser coletado."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Verificar healthcheck",
        "description": "Verifica a saúde da controladora"
      }
    },
    "/api/open": {
      "description": "Abre a agência de forma remota",
      "post": {
        "requestBody": {},
        "tags": [
          "Controladoras: Abertura/Fechamento"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Abertura Remota": {
                    "value": {
                      "statusCode": 200,
                      "data": "Sucesso"
                    }
                  }
                }
              }
            },
            "description": "Resultado da porta aberta com sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Abertura remota": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o a porta já está aberta."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Abertura remota",
        "description": "Abre a agência de forma remota"
      }
    },
    "/api/close": {
      "description": "Fecha a agência de forma remota",
      "post": {
        "requestBody": {},
        "tags": [
          "Controladoras: Abertura/Fechamento"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Fechamento remoto": {
                    "value": {
                      "statusCode": 200,
                      "data": "Sucesso"
                    }
                  }
                }
              }
            },
            "description": "Resultado do fechamento remoto com sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Fechamento remoto": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando a porta já está fechada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Fechamento remoto",
        "description": "Fecha a agência de forma remota"
      }
    },
    "/api/test": {
      "description": "Testa um item especícifo de hardware da controladora",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/StartTestType"
              },
              "examples": {
                "Realizar teste": {
                  "value": {
                    "name": "KEYBOARD_EXTERN"
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Controladoras: Teste de Hardware"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Realizar teste": {
                    "value": {
                      "statusCode": 200,
                      "data": "Sucesso"
                    }
                  }
                }
              }
            },
            "description": "Teste concluído com sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Realizar teste": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o hardware testado falhou no teste."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Teste de Hardware",
        "description": "Testa um item especícifo de hardware da controladora"
      }
    },
    "/api/sync/user": {
      "description": "Sincroniza dados do usuário na controladora",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/SyncUserType"
              },
              "examples": {
                "Sincronizar vigilante": {
                  "value": {
                    "senha": "234567",
                    "biometrias": [
                      {
                        "hand": "esquerda",
                        "finger": "indicador",
                        "hash": "722fff24224017087b73855ab66fcbfcd2c2c28dd427f52657f7c4d892a4949e"
                      },
                      "fc1aff017339366360ab4d3843796fd684917e3b7c1e8c124bd1ced27e5a04e9",
                      "595622448985b5396f9847e8a1daaf381f4326b7cbb74f62a5d04b7eacbca463"
                    ],
                    "vigilante": {
                      "nome": "NILTON JR",
                      "cpf": "11111111111",
                      "cnv": "00000",
                      "personId": "82459"
                    }
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Controladoras: Sincronização"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Sincronizar vigilante": {
                    "value": {
                      "statusCode": 200,
                      "data": "Sucesso"
                    }
                  }
                }
              }
            },
            "description": "Vigilante sincronizado com sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Sincronizar vigilante": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando o vigilante não pode ser sincronizado."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Sincronizar usuário",
        "description": "Sincroniza dados do usuário na controladora"
      }
    },
    "/api/controladora": {
      "description": "Atualiza os dados na controladora",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/UpdateControladoraType"
              },
              "examples": {
                "Atualiza controladora": {
                  "value": {
                    "serverIp": "https://sicia.empresaXX/",
                    "ip": "192.168.255.200",
                    "mac": "1e:1e:1e:1e:1e:1e",
                    "nomeUnidade": "PLANALTO"
                  }
                }
              }
            }
          },
          "required": true
        },
        "tags": [
          "Controladoras: Sincronização"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                },
                "examples": {
                  "Atualiza controladora": {
                    "value": {
                      "statusCode": 200,
                      "data": "Sucesso"
                    }
                  }
                }
              }
            },
            "description": "Controladora atualizada com sucesso."
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                },
                "examples": {
                  "Atualiza controladora": {
                    "value": {
                      "statusCode": 400,
                      "data": "Erro"
                    }
                  }
                }
              }
            },
            "description": "Erro gerado quando a controladora não pode ser atualizada."
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Atualizar dados da controladora",
        "description": "Atualiza os dados na controladora"
      }
    },
    "/api/acessodiario": {
      "description": "Adiciona um novo acesso diario",
      "post": {
        "requestBody": {
          "content": {
            "application/json": {
              "schema": {
                "$ref": "#/components/schemas/NovoAcessoDiarioType"
              }
            }
          },
          "required": true
        },
        "tags": [
          "Rota Interna: Não deve ser acessada pela controladora"
        ],
        "responses": {
          "200": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/SucessoType"
                }
              }
            },
            "description": "Novo acesso registrado"
          },
          "400": {
            "content": {
              "application/json": {
                "schema": {
                  "$ref": "#/components/schemas/ErroType"
                }
              }
            },
            "description": "Erro gerado quando nao houve novo acesso diario registrado"
          }
        },
        "security": [
          {
            "APIKey": [],
            "Intranet": []
          }
        ],
        "summary": "Novo acesso diario",
        "description": "Novo acesso diario"
      }
    }
  },
  "components": {
    "schemas": {
      "AberturaFechamentoAgenciaType": {
        "description": "Descreve uma abertura/fechamento.",
        "required": [
          "mac",
          "coercion",
          "personId"
        ],
        "type": "object",
        "properties": {
          "mac": {
            "type": "string",
            "description": "Endereço MAC da controladora"
          },
          "coercion": {
            "type": "boolean",
            "description": "Abertura/fechamento foi realizado mediante coerção?"
          },
          "personId": {
            "type": "number",
            "description": "Identificador único da pessoa que solicitou a abertura/fechamento"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"mac\":\"1a:1a:1a:1a:1a:1a\",\n    \"coercion\":false,\n    \"personId\":12493}"
      },
      "AuthorizerType": {
        "description": "Descreve um autorizador.",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Identificador único do autorizador.",
            "type": "number"
          },
          "name": {
            "description": "Nome do autorizador.",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"id\": 3,\n    \"name\": \"AUTORIZADOR\"\n}"
      },
      "UnityType": {
        "description": "Descreve uma unidade.",
        "required": [
          "id",
          "type",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Identificador único da unidade.",
            "type": "number"
          },
          "cgcId": {
            "description": "Identificador único do CGC.",
            "type": "number"
          },
          "siicoId": {
            "description": "Identificador único da unidade SIICO.",
            "type": "number"
          },
          "type": {
            "description": "Tipo da unidade.",
            "enum": [
              "agencia",
              "pab"
            ],
            "type": "string"
          },
          "name": {
            "description": "Nome da unidade.",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"id\": 11,\n    \"cgcId\": 0002,\n    \"siicoId\": 2,\n    \"type\": \"agencia\",\n    \"name\": \"PLANALTO, DF\"\n}"
      },
      "AgentType": {
        "description": "Descreve um agente.",
        "required": [
          "id",
          "contract",
          "business"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Identificador único do agente.",
            "type": "number"
          },
          "contract": {
            "description": "Número do contrato em que o agente está vinculado.",
            "type": "string"
          },
          "business": {
            "description": "Nome da empresa de vigilância com o contrato do agente.",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"id\": 11781,\n    \"contract\": \"12345/2024\",\n    \"business\": \"LOREM IPSUM VIGILÂNCIA E TRANSPORTE DE VALORES LTDA., DF\"\n}"
      },
      "ControladoraType": {
        "description": "Descreve uma controladora.",
        "required": [
          "id",
          "mac",
          "ip"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Identificador único da controladora.",
            "type": "number"
          },
          "mac": {
            "description": "Endereço MAC da controladora.",
            "type": "string"
          },
          "ip": {
            "description": "Endereço IP da controladora.",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"id\": 13,\n    \"mac\": \"1a:1a:1a:1a:1a:1a\",\n    \"ip\": \"10.11.255.12\"\n}"
      },
      "AddressType": {
        "description": "Descreve um endereço.",
        "required": [
          "city",
          "state"
        ],
        "type": "object",
        "properties": {
          "city": {
            "$ref": "#/components/schemas/CityType"
          },
          "state": {
            "$ref": "#/components/schemas/StateType"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"city\": {\n    \"id\": 33,\n    \"name\": \"BRASILIA\"\n},\n    \"state\": {\n    \"id\": 53,\n    \"name\": \"DISTRITO FEDERAL\",\n    \"acronym\": \"DF\"\n}\n}"
      },
      "CityType": {
        "description": "Descreve uma cidade.",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Identificador único da cidade.",
            "type": "number"
          },
          "name": {
            "description": "Nome da cidade.",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"id\": 33,\n    \"name\": \"BRASILIA\"\n}"
      },
      "StateType": {
        "description": "Descreve um estado.",
        "required": [
          "id",
          "name",
          "acronym"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Identificador único do estado.",
            "type": "number"
          },
          "name": {
            "description": "Nome do estado.",
            "type": "string"
          },
          "acronym": {
            "description": "Sigla do estado",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"id\": 53,\n    \"name\": \"DISTRITO FEDERAL\",\n    \"acronym\": \"DF\"\n}"
      },
      "GisegType": {
        "description": "Descreve um Giseg.",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Identificador único do Giseg.",
            "type": "number"
          },
          "name": {
            "description": "Nome do Giseg.",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"id\": 7635,\n    \"name\": \"SEGURANCA EMPRESARIAL RECIFE\"\n}"
      },
      "SrType": {
        "description": "Descreve uma unidade centralizadora.",
        "required": [
          "id",
          "name"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Identificador único da unidade centralizadora da empresaXX.",
            "type": "number"
          },
          "name": {
            "description": "Nome da unidade centralizadora.",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n \"id\": 2639,\n \"name\": \"BRASILIA NORTE, DF\"\n}"
      },
      "OperationType": {
        "description": "Descreve os horários da operação.",
        "type": "object",
        "properties": {
          "openHour": {
            "description": "Hora de abertura da operação.",
            "type": "number"
          },
          "closeHour": {
            "description": "Hora de fechamento da operação.",
            "type": "number"
          },
          "openMinute": {
            "description": "Minuto de abertura da operação.",
            "type": "number"
          },
          "closeMinute": {
            "description": "Minuto de fechamento da operação.",
            "type": "number"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"openHour\": 8,\n    \"closeHour\": 18,\n    \"openMinute\": 230\n    \"closeMinute\": 30\n}"
      },
      "TecladoExternoType": {
        "description": "Descreve uma abertura de porta magnética.",
        "required": [
          "mac",
          "pessoaId",
          "coercion",
          "accessDate"
        ],
        "type": "object",
        "properties": {
          "mac": {
            "type": "string",
            "description": "Endereço MAC da controladora"
          },
          "pessoaId": {
            "type": "number",
            "description": "Identificador único da pessoa que efetuou a abertura"
          },
          "coercion": {
            "type": "boolean",
            "description": "Abertura foi realizada mediante coerção?"
          },
          "accessDate": {
            "type": "string",
            "description": "Horário em que a solicitação foi criada."
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"mac\":\"1a:1a:1a:1a:1a:1a\",\n    \"pessoaId\":12493,\n    \"coercion\":false,\n    \"accessDate\":\"2023-02-17T13:30:24.336Z\"\n}}"
      },
      "TestesType": {
        "description": "Descreve um resultado de um teste.",
        "required": [
          "mac",
          "type",
          "succeed"
        ],
        "type": "object",
        "properties": {
          "mac": {
            "description": "Endereço MAC da controladora.",
            "type": "string"
          },
          "type": {
            "description": "Tipo do teste realizado.",
            "enum": [
              "biometria",
              "luzes",
              "teclado_principal",
              "teclado_auxiliar",
              "tela",
              "sinal_sonoro"
            ],
            "type": "string"
          },
          "succeed": {
            "description": "Hardware passou no teste realizado?",
            "type": "boolean"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"mac\":\"1e:1e:1e:1e:1e:1e\",\n    \"type\":\"teclado_auxiliar\",\n    \"succeed\":true\n}"
      },
      "RequestTestType": {
        "description": "Descreve uma requisição de um teste.",
        "required": [
          "ip",
          "type"
        ],
        "type": "object",
        "properties": {
          "ip": {
            "description": "Endereço IP da controladora.",
            "type": "string"
          },
          "type": {
            "description": "Tipo do teste realizado.",
            "enum": [
              "biometria",
              "luzes",
              "teclado_principal",
              "teclado_auxiliar",
              "tela",
              "sinal_sonoro"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"ip\":\"10.12.15.150\",\n    \"type\":\"teclado_auxiliar\"\n}"
      },
      "SyncPessoaType": {
        "description": "Descreve uma requisição de um teste.",
        "required": [
          "pessoaId",
          "mac"
        ],
        "type": "object",
        "properties": {
          "mac": {
            "description": "Endereço IP da controladora.",
            "type": "string"
          },
          "pessoaId": {
            "description": "Id da pessoa a ser sincronizada.",
            "type": "number"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"mac\":\"1a:1a:1a:1a:1a:1a\",\n    \"pessoaId\":12493\n}}"
      },
      "SyncType": {
        "description": "Descreve uma sincronização.",
        "required": [
          "version",
          "status",
          "macControladora",
          "nomeHardware"
        ],
        "type": "object",
        "properties": {
          "version": {
            "description": "Versão do firmware da controladora",
            "type": "string"
          },
          "status": {
            "description": "A controladora tem acessos a seram sincronizados?.",
            "type": "boolean"
          },
          "macControladora": {
            "description": "Endereço MAC da Controladora.",
            "type": "string"
          },
          "nomeHardware": {
            "description": "Nome do Hardware.",
            "type": "string"
          },
          "access": {
            "description": "Acessos registrados enquanto a controladora esteve offline.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/AccessType"
            }
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"version\":\"v1.3-rc\",\n    \"status\":true,\n    \"macControladora\":\"1e:1e:1e:1e:1e:1e\",\n    \"nomeHardware\":\"RPi1\",\n    \"access\":[{\"type\":\"normal\",\n    \"delay\":\"2023-01-17\",\n    \"coercion\":false,\n    \"attendance\":false,\n    \"declined\":false,\n    \"direction\":\"entrada\",\n    \"accessDate\":\"2023-01-17\",\n    \"localTimezone\":\"-03:00\",\n    \"observation\":\"nenhuma\"},\n    {\"type\":\"normal\",\n    \"delay\":\"2023-01-17\",\n    \"coercion\":false,\n    \"attendance\":false,\n    \"declined\":false,\n    \"direction\":\"abertura\",\n    \"accessDate\":\"2023-01-17\",\n    \"localTimezone\":\"-03:00\",\n    \"observation\":\"nenhuma\"},\n    {\"type\":\"normal\",\n    \"delay\":\"2023-01-17\",\n    \"coercion\":false,\n    \"attendance\":false,\n    \"declined\":false,\n    \"direction\":\"fechamento\",\n    \"accessDate\":\"2023-01-17\",\n    \"localTimezone\":\"-03:00\",\n    \"observation\":\"nenhuma\"},\n    {\"type\":\"normal\",\n    \"delay\":\"2023-01-17\",\n    \"coercion\":false,\n    \"attendance\":false,\n    \"declined\":false,\n    \"direction\":\"saida\",\n    \"accessDate\":\"2023-01-17\",\n    \"localTimezone\":\"-03:00\",\n    \"observation\":\"nenhuma\"\n}\n]\n}"
      },
      "AccessType": {
        "description": "Descreve um acesso.",
        "required": [
          "type",
          "delay",
          "coercion",
          "attendance",
          "declined",
          "direction",
          "accessDate",
          "localTimezone",
          "observation"
        ],
        "type": "object",
        "properties": {
          "type": {
            "description": "Descreve o tipo de acesso.",
            "enum": [
              "normal",
              "remoto",
              "manutencao",
              "acesso_unico",
              "acesso_primario",
              "acesso_secundario",
              "notificacao",
              "acesso_offline"
            ],
            "type": "string"
          },
          "delay": {
            "description": "Horario em que o acesso foi concluído.",
            "type": "string"
          },
          "coercion": {
            "type": "boolean",
            "description": "Abertura/fechamento foi realizado mediante coerção?"
          },
          "attendance": {
            "type": "boolean",
            "description": "Abertura/fechamento foi realizada mediante atendimento na central?"
          },
          "declined": {
            "type": "boolean",
            "description": "Abertura/fechamento foi recusada pela central?"
          },
          "direction": {
            "type": "string",
            "description": "Descreve a direção.",
            "enum": [
              "entrada",
              "saida",
              "abertura",
              "fechamento",
              "inconsistente"
            ]
          },
          "accessDate": {
            "type": "string",
            "description": "Horário em que a solicitação foi criada."
          },
          "localTimezone": {
            "type": "string",
            "description": "Fuso horário do local onde a controladora se encontra."
          },
          "observation": {
            "description": "Observações do acesso.",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"type\":\"normal\",\n    \"delay\":\"2023-01-17\",\n    \"coercion\":false,\n    \"attendance\":false,\n    \"declined\":false,\n    \"direction\":\"entrada\",\n    \"accessDate\":\"2023-01-17\",\n    \"localTimezone\":\"-03:00\",\n    \"observation\":\"nenhuma\"\n}"
      },
      "GetPINFiltroType": {
        "description": "Descreve uma lista de PINs.",
        "required": [
          "itens"
        ],
        "type": "object",
        "properties": {
          "itens": {
            "description": "Lista de PINs.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/PinType"
            }
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"itens\":1,\n    \"data\":[{\n    \"cadastralSituation\":3,\n    \"validity\":\"2022-12-20T18:39:39.560Z\",\n    \"value\":\"046205\",\n    \"type\":\"normal\",\n    \"personId\":41450\n}]\n}"
      },
      "PinType": {
        "description": "Descreve um PIN a ser salvo.",
        "required": [
          "cadastralSituation",
          "validity",
          "value",
          "type",
          "personId"
        ],
        "type": "object",
        "properties": {
          "cadastralSituation": {
            "description": "Situação do PIN: 0 erro; 1 adquirindo; 2 sucesso; 3 criado",
            "type": "number"
          },
          "validity": {
            "description": "Data de expiração do PIN",
            "type": "string"
          },
          "value": {
            "description": "PIN coletado",
            "type": "string"
          },
          "type": {
            "description": "Tipo do PIN.",
            "enum": [
              "normal",
              "coercao"
            ],
            "type": "string"
          },
          "personId": {
            "description": "Identificador único da pessoa que coletou o PIN.",
            "type": "number"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"cadastralSituation\":3,\n    \"validity\":\"2022-12-20T18:39:39.560Z\",\n    \"value\":\"046205\",\n    \"type\":\"normal\",\n    \"personId\":41450\n}"
      },
      "BiometriaType": {
        "description": "Descreve uma Biometria a ser salva.",
        "required": [
          "hand",
          "finger",
          "isBlocked",
          "cadastralSituation",
          "isCoercao",
          "value",
          "personId"
        ],
        "type": "object",
        "properties": {
          "hand": {
            "description": "Especifica qual a mão foi utilizada ou se foi facial",
            "enum": [
              "direita",
              "esquerda",
              "rosto"
            ],
            "type": "string"
          },
          "finger": {
            "description": "Especifica qual o dedo foi utilizado ou se foi facial",
            "enum": [
              "dedao",
              "indicador",
              "rosto"
            ],
            "type": "string"
          },
          "isBlocked": {
            "description": "A Biometria está bloqueada?",
            "type": "boolean"
          },
          "cadastralSituation": {
            "description": "Situação do PIN: 0 erro; 1 adquirindo; 2 sucesso; 3 criado",
            "type": "number"
          },
          "isCoercao": {
            "description": "A Biometria será usada para indicar coerção?",
            "type": "boolean"
          },
          "value": {
            "description": "Hash da biometria coletada",
            "type": "string"
          },
          "personId": {
            "description": "Identificador único da pessoa que coletou a biometria.",
            "type": "number"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"hand\":\"esquerda\",\n    \"finger\":\"indicador\",\n    \"isBlocked\":false,\n    \"cadastralSituation\":3,\n    \"isCoercao\":false,\n    \"value\":\"hash=hjfJHFAjfaj\",\n    \"personId\":41450\n}"
      },
      "CentralRequestType": {
        "description": "Descreve uma solicitação de abertura/fechamento para a central.",
        "required": [
          "mac",
          "pessoaId",
          "coercion",
          "direction"
        ],
        "type": "object",
        "properties": {
          "mac": {
            "description": "Especifica qual o endereço MAC da controladora que está realizando a requisição.",
            "type": "string"
          },
          "pessoaId": {
            "description": "Identificador único da pessoa que está realizando a requisição.",
            "type": "number"
          },
          "coercion": {
            "description": "A requisição foi realizada mediante coerção?",
            "type": "boolean"
          },
          "direction": {
            "description": "Especifica a direção da requisição",
            "type": "string",
            "enum": [
              "entrada",
              "saida",
              "abertura",
              "fechamento",
              "inconsistente"
            ]
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"mac\":\"b8:27:eb:08:7a:62\",\n    \"pessoaId\":10,\n    \"coercion\":false,\n    \"direction\":\"entrada\"\n}"
      },
      "CentralResponseType": {
        "description": "Descreve uma resposta a uma solicitação de abertura/fechamento.",
        "required": [
          "id",
          "declined",
          "authorizerId",
          "observation"
        ],
        "type": "object",
        "properties": {
          "id": {
            "description": "Identificação temporária da solicitação",
            "type": "number"
          },
          "declined": {
            "description": "A solicitação foi declinada?",
            "type": "boolean"
          },
          "authorizerId": {
            "description": "Identificador único do autorizador que atendeu a solicitação",
            "type": "number"
          },
          "observation": {
            "description": "Observações",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"id\":20,\n    \"declined\":false,\n    \"authorizerId\":10,\n    \"observation\":\"nenhuma\"\n}"
      },
      "NotificationType": {
        "description": "Descreve uma nova notificação.",
        "required": [
          "notificationType",
          "access"
        ],
        "type": "object",
        "properties": {
          "notificationType": {
            "description": "Especifica qual o tipo da notificação.",
            "enum": [
              "pin_invalido",
              "pin_out_hours"
            ],
            "type": "string"
          },
          "access": {
            "$ref": "#/components/schemas/NotificationAccessType"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"notificationType\":\"pin_out_hours\",\n    \"access\":{\n    \"delay\":\"2023-01-17\",\n    \"coercion\":false,\n    \"attendance\":false,\n    \"declined\":false,\n    \"accessDate\":\"2023-01-17\",\n    \"localTimezone\":\"-03:00\",\n    \"personId\":41450,\n    \"unityId\":3\n}\n}"
      },
      "NotificationAccessType": {
        "description": "Descreve um acesso em uma notificação.",
        "required": [
          "delay",
          "coercion",
          "attendance",
          "declined",
          "accessDate",
          "localTimezone",
          "personId",
          "unityId"
        ],
        "type": "object",
        "properties": {
          "delay": {
            "description": "Horário em que o acesso foi concluído.",
            "type": "string"
          },
          "coercion": {
            "type": "boolean",
            "description": "Abertura/fechamento foi realizado mediante coerção?"
          },
          "attendance": {
            "type": "boolean",
            "description": "Abertura/fechamento foi realizada mediante atendimento na central?"
          },
          "declined": {
            "type": "boolean",
            "description": "Abertura/fechamento foi recusada pela central?"
          },
          "accessDate": {
            "type": "string",
            "description": "Horário em que a solicitação foi criada."
          },
          "localTimezone": {
            "type": "string",
            "description": "Fuso horário do local onde a controladora se encontra."
          },
          "personId": {
            "description": "Identificador único da pessoa que gerou a notificação.",
            "type": "number"
          },
          "unityId": {
            "description": "Identificador único da unidade que gerou a notificação.",
            "type": "number"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"delay\":\"2023-01-17\",\n    \"coercion\":false,\n    \"attendance\":false,\n    \"declined\":false,\n    \"accessDate\":\"2023-01-17\",\n    \"localTimezone\":\"-03:00\",\n    \"personId\":41450,\n    \"unityId\":3\n}"
      },
      "VigilanteType": {
        "description": "Descreve um vigilante.",
        "required": [
          "nome",
          "cpf",
          "cnv",
          "personId"
        ],
        "type": "object",
        "properties": {
          "nome": {
            "description": "Nome do vigilante",
            "type": "string"
          },
          "cpf": {
            "description": "CPF do vigilante.",
            "type": "number"
          },
          "cnv": {
            "description": "CNV do vigilante.",
            "type": "number"
          },
          "personId": {
            "description": "Identificador único da pessoa vigilante.",
            "type": "number"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"nome\":\"NILTON JR\",\n    \"cpf\":11111111111,\n    \"cnv\":321121,\n    \"personId\":82459,\n}"
      },
      "BiometriaFpType": {
        "description": "Descreve uma Biometria a ser salva.",
        "required": [
          "hand",
          "finger",
          "personId"
        ],
        "type": "object",
        "properties": {
          "hand": {
            "description": "Especifica qual a mão foi utilizada ou se foi facial",
            "enum": [
              "direita",
              "esquerda",
              "rosto"
            ],
            "type": "string"
          },
          "finger": {
            "description": "Especifica qual o dedo foi utilizado ou se foi facial",
            "enum": [
              "dedao",
              "indicador",
              "rosto"
            ],
            "type": "string"
          },
          "personId": {
            "description": "Identificador único da pessoa que coletou a biometria.",
            "type": "number"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"hand\":\"esquerda\",\n    \"finger\":\"indicador\",\n    \"personId\":41450\n}"
      },
      "CollectPinType": {
        "description": "Descreve um PIN a ser coletado.",
        "required": [
          "personId"
        ],
        "type": "object",
        "properties": {
          "personId": {
            "description": "Identificador único da pessoa que coletará a biometria.",
            "type": "number"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"personId\":41450\n}"
      },
      "CustodiaType": {
        "description": "Descreve uma custódia a ser alterada.",
        "required": [
          "custodia"
        ],
        "type": "object",
        "properties": {
          "custodia": {
            "description": "Especifica qual o novo regime de custódia será adotado na controladora",
            "enum": [
              "simples",
              "dupla"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"custodia\":\"simples\"\n}"
      },
      "ChangeCustodiaType": {
        "description": "Descreve uma custódia a ser alterada.",
        "required": [
          "custodia",
          "mac"
        ],
        "type": "object",
        "properties": {
          "mac": {
            "description": "Especifica qual o endereço MAC da controladora",
            "type": "string"
          },
          "custodia": {
            "description": "Especifica qual o novo regime de custódia será adotado na controladora",
            "enum": [
              "simples",
              "dupla"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"mac\":\"1e:1e:1e:1e:1e:1e\",\n    \"custodia\":\"simples\"\n}"
      },
      "StartTestType": {
        "description": "Descreve um teste a ser realizado.",
        "required": [
          "name"
        ],
        "type": "object",
        "properties": {
          "name": {
            "description": "Especifica qual hardware deve ser testado",
            "enum": [
              "FINGERPRINT",
              "KEYBOARD_EXTERN",
              "LEDS",
              "KEYBOARD_MAIN",
              "LCD",
              "BUZZER"
            ],
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"name\":\"KEYBOARD_EXTERN\"\n}"
      },
      "SyncUserType": {
        "description": "Descreve um usuário a ser salvsincronizado.",
        "required": [
          "senha",
          "biometrias",
          "vigilante"
        ],
        "type": "object",
        "properties": {
          "senha": {
            "description": "Especifica o PIN vinculado ao usuário que está sendo sincronizado",
            "type": "string"
          },
          "biometrias": {
            "description": "Especifica as biometrias vinculadas ao usuário que está sendo sincronizado",
            "type": "array",
            "items": {
              "description": "Hash sha256 da biometria",
              "type": "string"
            }
          },
          "vigilante": {
            "$ref": "#/components/schemas/VigilanteType"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"senha\":\"234567\",\n    \"biometrias\":[\n    \"722fff24224017087b73855ab66fcbfcd2c2c28dd427f52657f7c4d892a4949e\",\n    \"fc1aff017339366360ab4d3843796fd684917e3b7c1e8c124bd1ced27e5a04e9\",\n    \"595622448985b5396f9847e8a1daaf381f4326b7cbb74f62a5d04b7eacbca463\"\n    ],\n    \"vigilante\":{\n    \"nome\":\"NILTON JR\",\n    \"cpf\":11111111111,\n    \"cnv\":321121,\n    \"personId\":82459,\n}\n}"
      },
      "UpdateControladoraType": {
        "description": "Descreve uma Biometria a ser salva.",
        "required": [
          "serverIp",
          "ip",
          "mac",
          "nomeUnidade"
        ],
        "type": "object",
        "properties": {
          "serverIp": {
            "description": "Especifica o endereço do servidor para qual a controladora deve apontar",
            "type": "string"
          },
          "ip": {
            "description": "Especifica o IP que a controladora deve adotar",
            "type": "string"
          },
          "mac": {
            "description": "Especifica o endereço MAC que a controladora deve adotar",
            "type": "string"
          },
          "nomeUnidade": {
            "description": "Especifica o nome da unidade que a controladora passará a gerenciar",
            "type": "string"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"serverIp\":\"https://sicia.empresaXX/\",\n    \"ip\":\"192.168.255.200\",\n    \"mac\":\"1e:1e:1e:1e:1e:1e\",\n    \"nomeUnidade\":\"PLANALTO\"\n}"
      },
      "NovoAcessoDiarioType": {
        "description": "Descreve um acesso diario a ser salvo.",
        "required": [
          "mac",
          "direction",
          "type",
          "pessoaId",
          "coercion",
          "attendance"
        ],
        "type": "object",
        "properties": {
          "mac": {
            "description": "Especifica o endereço do MAC da controladora",
            "type": "string"
          },
          "direction": {
            "description": "Descreve a direção.",
            "type": "string",
            "enum": [
              "entrada",
              "saida",
              "abertura",
              "fechamento",
              "inconsistente"
            ]
          },
          "type": {
            "description": "Descreve o tipo de acesso.",
            "type": "string",
            "enum": [
              "normal",
              "remoto",
              "manutencao",
              "acesso_unico",
              "acesso_primario",
              "acesso_secundario",
              "notificacao",
              "acesso_offline"
            ]
          },
          "coercion": {
            "description": "Houver coerção?",
            "type": "boolean"
          },
          "attendance": {
            "description": "Houve atendimento?",
            "type": "boolean"
          },
          "nameAuthorizer": {
            "description": "Nome do autorizador.",
            "type": "string"
          }
        },
        "additionalProperties": false
      },
      "ErroType": {
        "title": "Root Type for ErroDataType",
        "description": "Mensagens de erro.",
        "type": "object",
        "properties": {
          "statusCode": {
            "format": "int32",
            "type": "integer"
          },
          "data": {
            "type": "string"
          },
          "detalhes": {
            "type": "string"
          }
        },
        "example": {
          "statusCode": 401,
          "data": "erro",
          "detalhes": ""
        }
      },
      "SucessoType": {
        "title": "Root Type for SucessoDataType",
        "description": "JSON de retorno em casos de sucesso.",
        "required": [
          "statusCode",
          "data"
        ],
        "type": "object",
        "properties": {
          "statusCode": {
            "format": "int32",
            "description": "Código de retorno de sucesso: 200",
            "type": "integer"
          },
          "data": {
            "description": "Mensagem de sucesso: ABERTURA ou FECHAMENTO",
            "type": "string"
          }
        },
        "example": {
          "statusCode": 200,
          "data": "ABERTURA"
        }
      },
      "SucessoCentralRequestType": {
        "title": "Root Type for SucessoCentralRequestType",
        "description": "JSON de retorno em casos de sucesso.",
        "required": [
          "statusCode",
          "id"
        ],
        "type": "object",
        "properties": {
          "statusCode": {
            "format": "int32",
            "description": "Código de retorno de sucesso: 200",
            "type": "integer"
          },
          "id": {
            "description": "Identificador temporário da requisição",
            "type": "number"
          }
        },
        "example": {
          "statusCode": 200,
          "id": 20
        }
      },
      "SucessoCentralResponseType": {
        "title": "Root Type for SucessoCentralResponseType",
        "description": "JSON de retorno em casos de sucesso.",
        "required": [
          "statusCode",
          "authorizer"
        ],
        "type": "object",
        "properties": {
          "statusCode": {
            "format": "int32",
            "description": "Código de retorno de sucesso: 200",
            "type": "integer"
          },
          "authorizer": {
            "description": "Identificador único do autorizador que respondeu à requisição",
            "type": "number"
          }
        },
        "example": {
          "statusCode": 200,
          "data": "ABERTURA"
        }
      },
      "SucessoHistoricoCustodiaType": {
        "description": "Root Type for SucessoHistoricoCustodiaType",
        "required": [
          "itens"
        ],
        "type": "object",
        "properties": {
          "itens": {
            "description": "Acessos registrados no histórico de custódia.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/HistoricoCustodiaItensType"
            }
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"itens\":[{\n    \"data\":\"2023-02-17T13:30:34.014Z\",\n    \"custodia\":\"simples\",\n    \"createdAt\":\"2023-02-17T13:30:34.014Z\",\n    \"updatedAt\":\"2023-02-17T13:30:34.014Z\"\n},\n    {\n    \"data\":\"2023-02-17T13:30:34.014Z\",\n    \"custodia\":\"simples\",\n    \"createdAt\":\"2023-02-17T13:30:34.014Z\",\n    \"updatedAt\":\"2023-02-17T13:30:34.014Z\"\n}\n]\n}"
      },
      "SolicitacoesType": {
        "description": "Root Type for SolicitacoesType",
        "required": [
          "itens"
        ],
        "type": "object",
        "properties": {
          "itens": {
            "description": "Lista de solicitacoes em aberto.",
            "type": "array",
            "items": {
              "$ref": "#/components/schemas/SolicitacoesItensType"
            }
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"itens\":[{\n    \"id\":1234,\n    \"tipo\":\"acesso_primario\",\n    \"delay\":null,\n    \"coercao\":true,\n    \"atendimento\":false,\n    \"declined\":null,\n    \"direcao\":\"entrada\",\n    \"data_acesso\":\"2024-12-20T02:05:09.849Z\",\n    \"fuso_local\":\"-03:00\",\n    \"observacao\":null,\n    \"fk_nu_controladora\":3371,\n    \"nu_controladora_mac\":\"b8:27:eb:02:43:54\",\n    \"nu_controladora_ip\":\"10.69.181.85\",\n    \"fk_nu_cidade\":2027,\n    \"no_cidade\":null,\n    \"fk_nu_estado\":43,\n    \"no_estado\":\"RIO GRANDE DO SUL   \",\n    \"no_sigla_estado\":\"RS\",\n    \"fk_nu_giseg\":7637,\n    \"no_giseg\":\"SEGURANCA EMPRESARIAL SAO PAULO    \",\n    \"fk_nu_ocorrencia\":null,\n    \"fk_nu_pessoa\":43498,\n    \"fk_nu_agente\":40749,\n    \"no_agente\":\"GILBERTO LOPES\",\n    \"agente_cpf\":null,\n    \"agente_cnv\":null,\n    \"agente_foto\":null,\n    \"agente_telefone\":null,\n    \"agente_contrato\":null,\n    \"agente_empresa\":null,\n    \"fk_nu_porta\":3853,\n    \"fk_nu_sr\":2615,\n    \"no_sr\":\"SERRA GAUCHA, RS                   \",\n    \"fk_nu_unidade\":161,\n    \"fk_nu_unidade_cgc\":null,\n    \"fk_nu_unidade_siico\":567,\n    \"no_unidade\":\"0567 - ENCANTADO- RS\",\n    \"nu_unidade_tipo\":\"agencia\",\n    \"unidade_hora_abertura\":null,\n    \"unidade_minuto_abertura\":null,\n    \"unidade_hora_fechamento\":null,\n    \"unidade_minuto_fechamento\":null,\n    \"fk_nu_autorizador\":null,\n    \"no_autorizador\":\"Autorizador\",\n    \"matricula_autorizador\":null,\n    \"deletedAt\":null,\n    \"createdAt\":\"2023-02-17T13:30:34.014Z\",\n    \"updatedAt\":\"2023-02-17T13:30:34.014Z\"\n},\n    {\n    \"id\":1234,\n    \"tipo\":\"acesso_primario\",\n    \"delay\":null,\n    \"coercao\":true,\n    \"atendimento\":false,\n    \"declined\":null,\n    \"direcao\":\"entrada\",\n    \"data_acesso\":\"2024-12-20T02:05:09.849Z\",\n    \"fuso_local\":\"-03:00\",\n    \"observacao\":null,\n    \"fk_nu_controladora\":3371,\n    \"nu_controladora_mac\":\"b8:27:eb:02:43:54\",\n    \"nu_controladora_ip\":\"10.69.181.85\",\n    \"fk_nu_cidade\":2027,\n    \"no_cidade\":null,\n    \"fk_nu_estado\":43,\n    \"no_estado\":\"RIO GRANDE DO SUL   \",\n    \"no_sigla_estado\":\"RS\",\n    \"fk_nu_giseg\":7637,\n    \"no_giseg\":\"SEGURANCA EMPRESARIAL SAO PAULO    \",\n    \"fk_nu_ocorrencia\":null,\n    \"fk_nu_pessoa\":43498,\n    \"fk_nu_agente\":40749,\n    \"no_agente\":\"GILBERTO LOPES\",\n    \"agente_cpf\":null,\n    \"agente_cnv\":null,\n    \"agente_foto\":null,\n    \"agente_telefone\":null,\n    \"agente_contrato\":null,\n    \"agente_empresa\":null,\n    \"fk_nu_porta\":3853,\n    \"fk_nu_sr\":2615,\n    \"no_sr\":\"SERRA GAUCHA, RS                   \",\n    \"fk_nu_unidade\":161,\n    \"fk_nu_unidade_cgc\":null,\n    \"fk_nu_unidade_siico\":567,\n    \"no_unidade\":\"0567 - ENCANTADO- RS\",\n    \"nu_unidade_tipo\":\"agencia\",\n    \"unidade_hora_abertura\":null,\n    \"unidade_minuto_abertura\":null,\n    \"unidade_hora_fechamento\":null,\n    \"unidade_minuto_fechamento\":null,\n    \"fk_nu_autorizador\":null,\n    \"no_autorizador\":\"Autorizador\",\n    \"matricula_autorizador\":null,\n    \"deletedAt\":null,\n    \"createdAt\":\"2023-02-17T13:30:34.014Z\",\n    \"updatedAt\":\"2023-02-17T13:30:34.014Z\"\n}\n]\n}"
      },
      "SolicitacoesItensType": {
        "description": "Descreve um estado.",
        "required": [
          "id",
          "tipo",
          "delay",
          "coercao",
          "atendimento",
          "declined",
          "direcao",
          "data_acesso",
          "fuso_local",
          "observacao",
          "fk_nu_controladora",
          "nu_controladora_mac",
          "nu_controladora_ip",
          "fk_nu_cidade",
          "no_cidade",
          "fk_nu_estado",
          "no_estado",
          "no_sigla_estado",
          "fk_nu_giseg",
          "no_giseg",
          "fk_nu_ocorrencia",
          "fk_nu_pessoa",
          "fk_nu_agente",
          "no_agente",
          "agente_cpf",
          "agente_cnv",
          "agente_foto",
          "agente_telefone",
          "agente_contrato",
          "agente_empresa",
          "fk_nu_porta",
          "fk_nu_sr",
          "no_sr",
          "fk_nu_unidade",
          "fk_nu_unidade_cgc",
          "fk_nu_unidade_siico",
          "no_unidade",
          "nu_unidade_tipo",
          "unidade_hora_abertura",
          "unidade_minuto_abertura",
          "unidade_hora_fechamento",
          "unidade_minuto_fechamento",
          "fk_nu_autorizador",
          "no_autorizador",
          "matricula_autorizador",
          "deletedAt",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "id": {
            "type": "integer",
            "description": "Identificador único do registro",
            "format": "int64"
          },
          "tipo": {
            "type": "string",
            "description": "Tipo do registro"
          },
          "delay": {
            "type": "string",
            "description": "Tempo para atendimento",
            "format": "date-time"
          },
          "coercao": {
            "type": "boolean",
            "description": "Identificador de coerção"
          },
          "atendimento": {
            "type": "boolean",
            "description": "Identificador atendimento"
          },
          "declined": {
            "type": "boolean",
            "description": "Identificador de declinio de atendimento"
          },
          "direcao": {
            "type": "string",
            "description": "Abertura ou fechamento"
          },
          "data_acesso": {
            "type": "string",
            "description": "Data do registro",
            "format": "date-time"
          },
          "fuso_local": {
            "type": "string",
            "description": "Identificador do fuso horario"
          },
          "observacao": {
            "type": "string",
            "description": "Observação"
          },
          "fk_nu_controladora": {
            "type": "integer",
            "description": "Identificador único da controladora",
            "format": "int64"
          },
          "nu_controladora_mac": {
            "type": "string",
            "description": "Endereço MAC da controladora"
          },
          "nu_controladora_ip": {
            "type": "string",
            "description": "Endereço IP da controladora"
          },
          "fk_nu_cidade": {
            "type": "integer",
            "description": "Identificador único da cidade",
            "format": "int64"
          },
          "no_cidade": {
            "type": "string",
            "description": "Nome da Cidade"
          },
          "fk_nu_estado": {
            "type": "integer",
            "description": "Identificador único do estado",
            "format": "int64"
          },
          "no_estado": {
            "type": "string",
            "description": "Nome do estado"
          },
          "no_sigla_estado": {
            "type": "string",
            "description": "Sigla do estado"
          },
          "fk_nu_giseg": {
            "type": "integer",
            "description": "Identificador único do GISEG",
            "format": "int64"
          },
          "no_giseg": {
            "type": "string",
            "description": "Nome do GISEG"
          },
          "fk_nu_ocorrencia": {
            "type": "integer",
            "description": "Identificador único da ocorrência",
            "format": "int64"
          },
          "fk_nu_pessoa": {
            "type": "integer",
            "description": "Identificador único da pessoa",
            "format": "int64"
          },
          "fk_nu_agente": {
            "type": "integer",
            "description": "Identificador único do agente",
            "format": "int64"
          },
          "no_agente": {
            "type": "string",
            "description": "Nome do agente"
          },
          "agente_cpf": {
            "type": "string",
            "description": "CPF do agente"
          },
          "agente_cnv": {
            "type": "string",
            "description": "CNV do agente"
          },
          "agente_foto": {
            "type": "string",
            "description": "Foto do agente"
          },
          "agente_telefone": {
            "type": "string",
            "description": "Telefone do agente"
          },
          "agente_contrato": {
            "type": "string",
            "description": "Contrato do agente"
          },
          "agente_empresa": {
            "type": "string",
            "description": "Empresa do agente"
          },
          "fk_nu_porta": {
            "type": "integer",
            "description": "Identificador único da porta",
            "format": "int64"
          },
          "fk_nu_sr": {
            "type": "integer",
            "description": "Identificador único do SR",
            "format": "int64"
          },
          "no_sr": {
            "type": "string",
            "description": "Nome do SR"
          },
          "fk_nu_unidade": {
            "type": "integer",
            "description": "Identificador único da unidade",
            "format": "int64"
          },
          "fk_nu_unidade_cgc": {
            "type": "integer",
            "description": "Identificador único da unidade CGC",
            "format": "int64"
          },
          "fk_nu_unidade_siico": {
            "type": "integer",
            "description": "Identificador único da unidade Siico",
            "format": "int64"
          },
          "no_unidade": {
            "type": "string",
            "description": "Nome da unidade"
          },
          "nu_unidade_tipo": {
            "type": "string",
            "description": "Tipo da unidade"
          },
          "unidade_hora_abertura": {
            "type": "integer",
            "description": "Hora de abertura da unidade",
            "format": "int64"
          },
          "unidade_minuto_abertura": {
            "type": "integer",
            "description": "Minuto de abertura da unidade",
            "format": "int64"
          },
          "unidade_hora_fechamento": {
            "type": "integer",
            "description": "Hora de fechamento da unidade",
            "format": "int64"
          },
          "unidade_minuto_fechamento": {
            "type": "integer",
            "description": "Minuto de fechamento da unidade",
            "format": "int64"
          },
          "fk_nu_autorizador": {
            "type": "integer",
            "description": "Identificador único do autorizador",
            "format": "int64"
          },
          "no_autorizador": {
            "type": "string",
            "description": "Nome do autorizador"
          },
          "matricula_autorizador": {
            "type": "string",
            "description": "Matrícula do autorizador"
          },
          "deletedAt": {
            "type": "string",
            "description": "Data da remoção do registro",
            "format": "date-time"
          },
          "createdAt": {
            "type": "string",
            "description": "Data da criação do registro",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Data da alteração do registro",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"id\":1234,\n    \"tipo\":\"acesso_primario\",\n    \"delay\":null,\n    \"coercao\":true,\n    \"atendimento\":false,\n    \"declined\":null,\n    \"direcao\":\"entrada\",\n    \"data_acesso\":\"2024-12-20T02:05:09.849Z\",\n    \"fuso_local\":\"-03:00\",\n    \"observacao\":null,\n    \"fk_nu_controladora\":3371,\n    \"nu_controladora_mac\":\"b8:27:eb:02:43:54\",\n    \"nu_controladora_ip\":\"10.69.181.85\",\n    \"fk_nu_cidade\":2027,\n    \"no_cidade\":null,\n    \"fk_nu_estado\":43,\n    \"no_estado\":\"RIO GRANDE DO SUL   \",\n    \"no_sigla_estado\":\"RS\",\n    \"fk_nu_giseg\":7637,\n    \"no_giseg\":\"SEGURANCA EMPRESARIAL SAO PAULO    \",\n    \"fk_nu_ocorrencia\":null,\n    \"fk_nu_pessoa\":43498,\n    \"fk_nu_agente\":40749,\n    \"no_agente\":\"GILBERTO LOPES\",\n    \"agente_cpf\":null,\n    \"agente_cnv\":null,\n    \"agente_foto\":null,\n    \"agente_telefone\":null,\n    \"agente_contrato\":null,\n    \"agente_empresa\":null,\n    \"fk_nu_porta\":3853,\n    \"fk_nu_sr\":2615,\n    \"no_sr\":\"SERRA GAUCHA, RS                   \",\n    \"fk_nu_unidade\":161,\n    \"fk_nu_unidade_cgc\":null,\n    \"fk_nu_unidade_siico\":567,\n    \"no_unidade\":\"0567 - ENCANTADO- RS\",\n    \"nu_unidade_tipo\":\"agencia\",\n    \"unidade_hora_abertura\":null,\n    \"unidade_minuto_abertura\":null,\n    \"unidade_hora_fechamento\":null,\n    \"unidade_minuto_fechamento\":null,\n    \"fk_nu_autorizador\":null,\n    \"no_autorizador\":\"Autorizador\",\n    \"matricula_autorizador\":null,\n    \"deletedAt\":null,\n    \"createdAt\":\"2023-02-17T13:30:34.014Z\",\n    \"updatedAt\":\"2023-02-17T13:30:34.014Z\"\n}"
      },
      "HistoricoCustodiaItensType": {
        "description": "Descreve um estado.",
        "required": [
          "data",
          "custodia",
          "createdAt",
          "updatedAt"
        ],
        "type": "object",
        "properties": {
          "data": {
            "type": "string",
            "description": "Data da alteração de custódia",
            "format": "date-time"
          },
          "custodia": {
            "type": "string",
            "description": "Custódia para qual foi alterada"
          },
          "createdAt": {
            "type": "string",
            "description": "Data da criação do registro",
            "format": "date-time"
          },
          "updatedAt": {
            "type": "string",
            "description": "Data da alteração do registro",
            "format": "date-time"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"data\":\"2023-02-17T13:30:34.014Z\",\n    \"custodia\":\"simples\",\n    \"createdAt\":\"2023-02-17T13:30:34.014Z\",\n    \"updatedAt\":\"2023-02-17T13:30:34.014Z\"\n}"
      },
      "SucessoHealthcheckType": {
        "title": "Root Type for SucessoHealthcheckType",
        "description": "JSON de retorno em casos de sucesso.",
        "required": [
          "mac",
          "status",
          "versao",
          "custodia"
        ],
        "type": "object",
        "properties": {
          "mac": {
            "description": "Endereço MAC da controladora",
            "type": "string"
          },
          "status": {
            "description": "Status da controladora",
            "type": "boolean"
          },
          "versao": {
            "description": "Versão do firmware da controladora",
            "type": "string"
          },
          "custodia": {
            "description": "Custódia atual da controladora",
            "type": "string"
          }
        },
        "example": "{\n    \"mac\":\"1e:1e:1e:1e:1e:1e\",\n    \"status\":true,\n    \"versao\":\"v1.3.10-rc\",\n    \"custodia\":\"simples\",\n}"
      },
      "RequestPINType": {
        "description": "Descreve uma requisição de um PIN.",
        "required": [
          "ip",
          "personId"
        ],
        "type": "object",
        "properties": {
          "ip": {
            "description": "Endereço IP da controladora.",
            "type": "string"
          },
          "personId": {
            "description": "Id da pessoa cujo PIN está vinculado.",
            "type": "number"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"ip\":\"10.11.12.150\",\n    \"pessoaId\":12493\n}}"
      },
      "RequestBiometriaType": {
        "description": "Descreve uma requisição de um PIN.",
        "required": [
          "hand",
          "finger",
          "ip",
          "personId"
        ],
        "type": "object",
        "properties": {
          "hand": {
            "description": "Mão a ser lida.",
            "type": "string"
          },
          "finger": {
            "description": "Dedo a ser lido.",
            "type": "string"
          },
          "ip": {
            "description": "Endereço IP da controladora.",
            "type": "string"
          },
          "personId": {
            "description": "Id da pessoa cujo PIN está vinculado.",
            "type": "number"
          }
        },
        "additionalProperties": false,
        "example": "{\n    \"hand\":\"esquerda\",\n    \"finger\":\"indicador\",\n    \"ip\":\"10.11.12.150\",\n    \"pessoaId\":12493\n}}"
      }
    }
  },
  "security": [
    {
      "APIKey": [],
      "Intranet": [
        "scope"
      ]
    }
  ]
}
